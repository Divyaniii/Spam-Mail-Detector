# -*- coding: utf-8 -*-
"""Spam mail detector using ai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11eM-tqlBTDFVHtX1vaL8NtVXfFhdqR4J
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import seaborn as sns
import matplotlib.pyplot as plt
import os
from google.colab import files

# Set up Kaggle API
print("Upload your kaggle.json file")
uploaded = files.upload()
os.makedirs('/root/.kaggle', exist_ok=True)
os.rename('kaggle.json', '/root/.kaggle/kaggle.json')
os.chmod('/root/.kaggle/kaggle.json', 600)

# Download Kaggle dataset
!pip install kaggle
!kaggle datasets download -d uciml/sms-spam-collection-dataset
!unzip -o sms-spam-collection-dataset.zip  # Use -o to overwrite existing files

# Load the dataset
df = pd.read_csv('spam.csv', encoding='latin-1')
# Drop unnecessary columns (if any) and rename for consistency
df = df[['v1', 'v2']].rename(columns={'v1': 'label', 'v2': 'text'})
# Replace 'ham' with 'no spam'
df['label'] = df['label'].replace('ham', 'no spam')

# Download required NLTK data
nltk.download('punkt')
nltk.download('punkt_tab')
nltk.download('stopwords')

# Preprocessing function
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    tokens = word_tokenize(text)
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    return ' '.join(tokens)

# Apply preprocessing
df['cleaned_text'] = df['text'].apply(preprocess_text)

# Split data
X = df['cleaned_text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize text using TF-IDF
vectorizer = TfidfVectorizer(max_features=1000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train Naive Bayes model
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Perform 5-fold cross-validation
cv_scores = cross_val_score(model, X_train_tfidf, y_train, cv=5)
print(f"Cross-Validation Accuracy: {cv_scores.mean():.2f} (+/- {cv_scores.std() * 2:.2f})")

# Predict and evaluate
y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)
print(f"\nTest Accuracy: {accuracy:.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Plot confusion matrix
cm = confusion_matrix(y_test, y_pred, labels=['no spam', 'spam'])
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Spam', 'Spam'], yticklabels=['No Spam', 'Spam'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Function to predict new SMS
def predict_email(email_text):
    cleaned_email = preprocess_text(email_text)
    email_tfidf = vectorizer.transform([cleaned_email])
    prediction = model.predict(email_tfidf)[0]
    return prediction

# Interactive SMS prediction
while True:
    email = input("Enter an SMS text to classify (or type 'exit' to stop): ")
    if email.lower() == 'exit':
        break
    result = predict_email(email)
    print(f"Prediction: {result}")

# Save model and vectorizer
import joblib
joblib.dump(model, 'spam_detector_model.pkl')
joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')